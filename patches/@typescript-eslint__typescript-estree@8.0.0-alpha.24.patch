diff --git a/dist/create-program/createProjectService.js b/dist/create-program/createProjectService.js
index c1603e1d23fa95616a8ea7b3a742c90239e991e0..8d6c28c4033120ad8a756f2d4919fa420f84cc9a 100644
--- a/dist/create-program/createProjectService.js
+++ b/dist/create-program/createProjectService.js
@@ -18,7 +18,9 @@ function createProjectService(optionsRaw, jsDocParsingMode) {
     // We import this lazily to avoid its cost for users who don't use the service
     // TODO: Once we drop support for TS<5.3 we can import from "typescript" directly
     // eslint-disable-next-line @typescript-eslint/no-require-imports
+    const fs = require('fs');
     const tsserver = require('typescript/lib/tsserverlibrary');
+    const { CORE_COMPILER_OPTIONS } = require('./shared');
     // TODO: see getWatchProgramsForProjects
     // We don't watch the disk, we just refer to these when ESLint calls us
     // there's a whole separate update pass in maybeInvalidateProgram at the bottom of getWatchProgramsForProjects
@@ -54,19 +56,34 @@ function createProjectService(optionsRaw, jsDocParsingMode) {
     if (options.defaultProject) {
         let configRead;
         try {
-            configRead = tsserver.readConfigFile(options.defaultProject, system.readFile);
+            // https://github.com/typescript-eslint/typescript-eslint/blob/5ca7f6e563779157cac1ac1592e2f1b82068715a/packages/typescript-estree/src/create-program/useProvidedPrograms.ts#L66
+            configRead = tsserver.getParsedCommandLineOfConfigFile(
+                options.defaultProject,
+                CORE_COMPILER_OPTIONS,
+                {
+                    onUnRecoverableConfigFileDiagnostic: diag => {
+                      throw new Error(formatDiagnostics([diag])); // ensures that `parsed` is defined.
+                    },
+                    fileExists: fs.existsSync,
+                    getCurrentDirectory: () =>
+                        system.getCurrentDirectory(),
+                    readDirectory: system.readDirectory,
+                    readFile: file => fs.readFileSync(file, 'utf-8'),
+                    useCaseSensitiveFileNames: system.useCaseSensitiveFileNames,
+                },
+            );
         }
         catch (error) {
             throw new Error(`Could not parse default project '${options.defaultProject}': ${error.message}`);
         }
-        if (configRead.error) {
-            throw new Error(`Could not read default project '${options.defaultProject}': ${tsserver.formatDiagnostic(configRead.error, {
-                getCurrentDirectory: system.getCurrentDirectory,
-                getCanonicalFileName: fileName => fileName,
-                getNewLine: () => node_os_1.default.EOL,
-            })}`);
-        }
-        service.setCompilerOptionsForInferredProjects(configRead.config.compilerOptions);
+        // if (configRead.error) {
+        //     throw new Error(`Could not read default project '${options.defaultProject}': ${tsserver.formatDiagnostic(configRead.error, {
+        //         getCurrentDirectory: system.getCurrentDirectory,
+        //         getCanonicalFileName: fileName => fileName,
+        //         getNewLine: () => node_os_1.default.EOL,
+        //     })}`);
+        // }
+        service.setCompilerOptionsForInferredProjects(configRead.options);
     }
     return {
         allowDefaultProject: options.allowDefaultProject,
@@ -77,3 +94,4 @@ function createProjectService(optionsRaw, jsDocParsingMode) {
 }
 exports.createProjectService = createProjectService;
 //# sourceMappingURL=createProjectService.js.map
+
